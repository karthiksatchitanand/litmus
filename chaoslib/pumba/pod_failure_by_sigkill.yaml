    - name: Setup pumba chaos infrastructure
      shell: >
        kubectl apply -f /chaoslib/pumba/pumba_kube.yaml
        -n {{ app_ns }}
      args:
        executable: /bin/bash
      register: result

      #TODO Verify pumba ds pods status against Ready Nodes
    - name: Confirm that the pumba ds is running on all nodes
      shell: >
        kubectl get pod -l app=pumba
        --no-headers -o custom-columns=:status.phase
        -n {{ app_ns }} | sort | uniq
      args:
        executable: /bin/bash
      register: result
      until: "result.stdout == 'Running'"
      delay: 2
      retries: 30
      ignore_errors: true

    ## Get app pod name
    - name: Select the app pod 
      shell: >
        kubectl get pod -l {{ app_label }} -n {{ app_ns }} -o=custom-columns=NAME:".metadata.name" --no-headers
        | shuf | head -1
      args:
        executable: /bin/bash
      register: app_pod

    ## TODO: Convert to handling via app labels 
    - name: Identify the application node
      shell: >
        kubectl get pod {{app_pod.stdout}} -n {{ app_ns }}
        --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: result

    - name: Record the application node name
      set_fact:
        app_node: "{{ result.stdout }}"

    - block:

      - name: Record the application container
        shell: >
          kubectl get pod {{ app_pod.stdout }} -n {{ app_ns }} -o jsonpath='{.items[0].spec.containers[0].name}'
        args:
          executable: /bin/bash
        register: container

      - name: Record the app_container
        set_fact:
          app_container: "{{ container.stdout }}"

      when: app_container is undefined

    - name: Record the pumba pod on app node
      shell: >
        kubectl get pod -l app=pumba -o wide
        -n {{ app_ns }} | grep {{ app_node }}
        | awk '{print $1}'
      args:
        executable: /bin/bash
      register: pumba_pod

    - name: Record restartCount
      shell: >
        kubectl get pod {{ app_pod.stdout }} -n {{ app_ns }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ app_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt_prev

    - name: Force kill the application pod using pumba
      shell: >
        kubectl exec {{ pumba_pod.stdout}} -n {{ app_ns }}
        -- pumba kill --signal SIGKILL re2:k8s_{{ app_container }}_;
      args:
        executable: /bin/bash
      ignore_errors: true
      register: result

    - name: Verify restartCount
      shell: >
        kubectl get pod {{ app_pod.stdout }} -n {{ app_ns }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ app_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt
      until: "restartCnt.stdout|int > restartCnt_prev.stdout|int"
      delay: 2
      retries: 30

    - name: Delete the pumba daemonset
      shell: >
        kubectl delete -f /chaoslib/pumba/pumba_kube.yaml -n {{ app_ns }}
      args:
        executable: /bin/bash
      register: result

    - name: Confirm that the pumba ds is deleted successfully
      shell: >
        kubectl get pod -l app=pumba
        --no-headers -n {{ app_ns }}
      args:
        executable: /bin/bash
      register: result
      until: "'Running' not in result.stdout"
      delay: 2
      retries: 150

